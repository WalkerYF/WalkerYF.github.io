<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  <subtitle>My Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wwyf.github.io/"/>
  <updated>2019-01-12T07:36:03.302Z</updated>
  <id>https://wwyf.github.io/</id>
  
  <author>
    <name>wyf</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://wwyf.github.io/2019/01/12/test-2018-hello-world/"/>
    <id>https://wwyf.github.io/2019/01/12/test-2018-hello-world/</id>
    <published>2019-01-12T07:36:03.302Z</published>
    <updated>2019-01-12T07:36:03.302Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><h2 id="test-imag"><a href="#test-imag" class="headerlink" title="test imag"></a>test imag</h2><p><img src="https://i.loli.net/2018/01/24/5a6875a4acc53.png" alt="这是使用公共图床上传的图片"></p><!-- ![](figure/2018-04-21-16-26-20.png) --><img src="/2019/01/12/test-2018-hello-world/2018-04-21-16-26-20.png" title="test"><h2 id="test-math"><a href="#test-math" class="headerlink" title="test math"></a>test math</h2><p>$$ a^2 = b $$</p><h2 id="test-chinese"><a href="#test-chinese" class="headerlink" title="test chinese"></a>test chinese</h2><p>这是中文。</p><h2 id="换了个头像"><a href="#换了个头像" class="headerlink" title="换了个头像"></a>换了个头像</h2><p><img src="http://blog.wwyf.top/logo.jpg" alt=""></p><h2 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h2><p>可以在<code>_posts</code>文件夹下创建自己的文件夹，然后hexo是不会管你的文件夹的！<br>继续测试。</p><p><img src="2018-05-05-11-31-29.png" alt="测试文件夹下放图片"></p><p>使用 typora的话，设置图片根目录后可以很方便的复制粘贴图片。</p><p><img src="1525494633350.png" alt="1525494633350"></p><h2 id="写好了一个脚本"><a href="#写好了一个脚本" class="headerlink" title="写好了一个脚本"></a>写好了一个脚本</h2><p>这个脚本用来自动创建一个新页面，并且填写yml模板信息</p><h2 id="测试脚注"><a href="#测试脚注" class="headerlink" title="测试脚注"></a>测试脚注</h2><p>脚注是<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top-right hint--error hint--large" aria-label="用来测试的脚注">[1]</span></a></sup></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">用来测试的脚注<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;test&quot;&gt;&lt;a href=&quot;#test&quot; class=&quot;head
      
    
    </summary>
    
      <category term="test" scheme="https://wwyf.github.io/categories/test/"/>
    
    
      <category term="test" scheme="https://wwyf.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>配置博客</title>
    <link href="https://wwyf.github.io/2019/01/12/2019-01-2019-01-12-%E9%85%8D%E7%BD%AE%E5%8D%9A%E5%AE%A2/"/>
    <id>https://wwyf.github.io/2019/01/12/2019-01-2019-01-12-配置博客/</id>
    <published>2019-01-12T04:00:01.000Z</published>
    <updated>2019-01-12T04:24:37.578Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>今天配置了一下博客。</p><ol><li>本地仅维护markdown文件</li><li>通过git push，将markdown文件push到腾讯云服务器</li><li>云服务器中的远程git仓库触发hooks，cd到服务器的博客文件中，拉取最新博客文件，并执行hexo g -d 生成博客文件并发布</li></ol><p>最重要的一个改变在于：本地不需要存储博客的配置文件，仅需维护内容即可，一切配置文件都存放在了云服务器上，而且网页静态文件的生成也放在了云服务器上。</p><p>test<br>test<br>test<br>test<br>test<br>test</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;今天配置了一下博客。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本地仅维护markdown文
      
    
    </summary>
    
      <category term="test" scheme="https://wwyf.github.io/categories/test/"/>
    
    
      <category term="test" scheme="https://wwyf.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>hexo配置评论系统</title>
    <link href="https://wwyf.github.io/2019/01/12/2018-05-2018-05-06-hexo%E9%85%8D%E7%BD%AE%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>https://wwyf.github.io/2019/01/12/2018-05-2018-05-06-hexo配置评论系统/</id>
    <published>2019-01-12T03:33:37.248Z</published>
    <updated>2019-01-12T03:33:37.248Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="hexo-评论系统"><a href="#hexo-评论系统" class="headerlink" title="hexo 评论系统"></a>hexo 评论系统</h1><p>有这样的想法，为自己的博客弄一个评论系统。</p><p>不过由于时间精力的缘故，还没有去弄。</p><p>先放一下要弄评论系统可能需要的一些资料。</p><p>第三方的评论系统似乎都不太好使，打算自建</p><p><a href="http://www.candura.us/posts/post-348/" target="_blank" rel="noopener">http://www.candura.us/posts/post-348/</a></p><p><a href="https://wzfou.com/hashover/" target="_blank" rel="noopener">https://wzfou.com/hashover/</a></p><p><a href="https://zhuanlan.zhihu.com/p/26955370" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26955370</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;hexo-评论系统&quot;&gt;&lt;a href=&quot;#hexo-评论系统&quot; c
      
    
    </summary>
    
      <category term="test" scheme="https://wwyf.github.io/categories/test/"/>
    
    
      <category term="test" scheme="https://wwyf.github.io/tags/test/"/>
    
      <category term="hexo" scheme="https://wwyf.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo中的评论系统</title>
    <link href="https://wwyf.github.io/2019/01/11/2019-01-2019-01-11-hexo%E4%B8%AD%E7%9A%84%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>https://wwyf.github.io/2019/01/11/2019-01-2019-01-11-hexo中的评论系统/</id>
    <published>2019-01-11T13:55:16.000Z</published>
    <updated>2019-01-12T03:33:37.284Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="关于hexo的评论系统"><a href="#关于hexo的评论系统" class="headerlink" title="关于hexo的评论系统"></a>关于hexo的评论系统</h1><p>这里要推荐一个极简无后端的评论系统！！！</p><blockquote><p>Valine 诞生于2017年8月7日，是一款基于Leancloud的快速、简洁且高效的无后端评论系统。<br>理论上支持但不限于静态博客，目前已有Hexo、Jekyll、Typecho、Hugo 等博客程序在使用Valine。</p></blockquote><p>官网是这一个：<a href="https://valine.js.org/" target="_blank" rel="noopener">https://valine.js.org/</a></p><h2 id="使用感受"><a href="#使用感受" class="headerlink" title="使用感受"></a>使用感受</h2><p>到leancloud上创建一个应用，然后找到把appid和appkey填到hexo的config里就好了！别的什么都不用怎么配置，哇比其他的方便多了，特别是之前那一个已经没有人维护的gitment。</p><p>引用几个博客的链接：</p><p><a href="https://blog.csdn.net/esa_dsq/article/details/78626509" target="_blank" rel="noopener">https://blog.csdn.net/esa_dsq/article/details/78626509</a><br><a href="https://xiaotiandi.github.io/publicBlog/2018-09-19-d196c9ad.html" target="_blank" rel="noopener">https://xiaotiandi.github.io/publicBlog/2018-09-19-d196c9ad.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;关于hexo的评论系统&quot;&gt;&lt;a href=&quot;#关于hexo的评论系
      
    
    </summary>
    
      <category term="test" scheme="https://wwyf.github.io/categories/test/"/>
    
    
      <category term="test" scheme="https://wwyf.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>立一个flag</title>
    <link href="https://wwyf.github.io/2019/01/11/2019-01-2019-01-11-%E7%AB%8B%E4%B8%80%E4%B8%AAflag/"/>
    <id>https://wwyf.github.io/2019/01/11/2019-01-2019-01-11-立一个flag/</id>
    <published>2019-01-11T13:10:01.000Z</published>
    <updated>2019-01-12T03:33:37.284Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>test 目录就是让我用来随便测试的吧。</p><p>吐槽一下，现在考试进度 6/8，加油吧~</p><p>我想测试一个图片</p><p><img src="1547212329062.png" alt="1547212329062"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;test 目录就是让我用来随便测试的吧。&lt;/p&gt;
&lt;p&gt;吐槽一下，现在考试进
      
    
    </summary>
    
      <category term="test" scheme="https://wwyf.github.io/categories/test/"/>
    
    
      <category term="test" scheme="https://wwyf.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>BCNF与4NF</title>
    <link href="https://wwyf.github.io/2018/11/01/2018-11-2018-11-01-BCNF%E4%B8%8E4NF/"/>
    <id>https://wwyf.github.io/2018/11/01/2018-11-2018-11-01-BCNF与4NF/</id>
    <published>2018-11-01T02:18:23.000Z</published>
    <updated>2019-01-12T09:07:41.134Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="数据库关系模式的BCNF分解与4NF分解"><a href="#数据库关系模式的BCNF分解与4NF分解" class="headerlink" title="数据库关系模式的BCNF分解与4NF分解"></a>数据库关系模式的BCNF分解与4NF分解</h1><p>这两种分解看得我云里雾里，今早好不容易觉得看懂了，觉得要写成一篇blog记下来，不然以后回来再看的时候可能又要看半天才能看懂了o(╥﹏╥)o。</p><p>书本上说的会比较抽象，虽然这保证了定义和方法的准确性，但是要去理解实在是有点困难，我想，将我解答题目的过程放上来能帮助这几种分解的理解。</p><h2 id="BCNF分解实例"><a href="#BCNF分解实例" class="headerlink" title="BCNF分解实例"></a>BCNF分解实例</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>有这样的关系模式$r(A,B,C,D,E,F)$，其中该关系模式需要满足以下函数依赖：</p><p>$ A \rightarrow BCD $</p><p>$ BC \rightarrow DE $</p><p>$ B \rightarrow D $</p><p>$ D \rightarrow A $</p><h3 id="分析原理"><a href="#分析原理" class="headerlink" title="分析原理"></a>分析原理</h3><ol><li>如何判断一个关系模式是否满足BCNF模式<ol><li>书本P196最上面：一个最简单的判定方法，但不可用于分解后的关系模式的判定</li><li>书本P196中间：可用于分解后的关系模式的判定</li></ol></li></ol><p>这两种方法，我觉得后者会相对比较难理解，但是在实际题目中还是的确能够使用上的。</p><p>具体的定义书本上就有，这里也照抄一份：</p><p>第一种方法：</p><p><img src="http://bit.ly/2Oka04m" alt=""></p><p>第二种方法：</p><p><img src="http://bit.ly/2Og6kkd" alt=""></p><h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><p>就，按顺序一个函数依赖一个函数依赖的看就好了。</p><h4 id="第一步分解"><a href="#第一步分解" class="headerlink" title="第一步分解"></a>第一步分解</h4><p>目前的关系模式$r$还没有分解，就使用第一种方法来进行分析：</p><p>对于函数依赖$A \rightarrow BCD$来说，根据第一种方法，我先计算$A^{+} = ABCDE$，发现$A^{+}$并没有包含关系$r$中的所有属性（$ABCDEF$，少了个$F$），因此$A$不是关系模式$r$的超码。</p><p>这样子，我就根据函数依赖$A \rightarrow BCD$说明了关系模式$r$不属于BCNF，因此将原有的关系模式$r$分解为$ (r-BCD) \cup (A,BCD) $</p><p>因此此步分解得到以下关系模式：</p><blockquote><p>$ r_1(A,B,C,D) $<br>$ r_2(A,E,F) $</p></blockquote><h4 id="检验第一步分解结果"><a href="#检验第一步分解结果" class="headerlink" title="检验第一步分解结果"></a>检验第一步分解结果</h4><p>在第二步分解结果前，需要检验第一步的分解结果是否满足BCNF条件，注意到这两个关系模式是分解后产生的，原先的第一种用来判断关系模式是否属于BCNF的方法不能够再使用，后面均使用第二种方法。</p><p>先看关系模式$r_1(A,B,C,D)$。</p><p>第二种方法要求$r_1$中属性的每一个子集$\alpha$，确保$\alpha^{+}$（F下$\alpha$的属性闭包）要么不包含$r-\alpha$的任何属性，要么包含$r_1$的所有属性。</p><blockquote><p>这里为遍历$r_1$中属性子集的过程<br>对于属性$A$，$A^{+} = ABCDE$，包含了$r_1$的所有属性<br>对于属性$B$，$B^{+} = ABCDE$，包含了$r_1$的所有属性<br>对于属性$C$，$C^{+} = C$，不包含$r_1 - C$的任何属性<br>对于属性$D$，$D^{+} = ABCDE$,包含了$r_1$的所有属性<br>对于属性$E$，$E^{+} = E$，不包含$r_1 - E$的任何属性<br>对于属性子集$AB，AC，AD，AE，BC，BD，BE，CD，DE$，属性闭包均为$ABCDE$，包含了$r_1$的所有属性<br>对于属性子集$CD$，$CD^{+} = CD$，不包含$r_1 - C$的任何属性<br>对于三个属性以上的属性子集，属性闭包均为$ABCDE$，包含了$r_1$的所有属性</p></blockquote><p>综上，$r_1$满足BCNF条件。</p><p>再看关系模式$r_2(A,E,F)$:</p><blockquote><p>这里为遍历$r_2$属性子集的过程<br>对于属性$A$，$A^{+} = ABCDE$，而$r_2 - A = EF$，会发现$A^{+}$包含了$r_2 - A$中的属性$E$，且没有包含$r_2$的所有属性（如属性$F$）</p></blockquote><p>找到了一个属性违反该条件，那么就可以证明有这样的一个函数依赖出现在$F^{+}$中：</p><p>$$A \rightarrow (A^{+} - A) \cap r_2$$</p><p>算一算，$A^{+} - A \cap r_2 = BCDE \cap AEF = E$</p><p>因此便找到了这样的一个函数依赖$A \rightarrow E$，让$r_2$不满足BCNF</p><h4 id="第二步分解"><a href="#第二步分解" class="headerlink" title="第二步分解"></a>第二步分解</h4><p>上面找到了这样的一个函数依赖$A \rightarrow E$，让$r_2(A,E,F)$不满足BCNF，<br>因此$r_2$可以这样子分解：</p><p>$r_3(A, E)$</p><p>$r_4(A, F)$</p><p>此步骤得到的分解结果为</p><blockquote><p>$r_1(A,B,C,D)$<br>$r_3(A, E)$<br>$r_4(A, F)$</p></blockquote><h4 id="检验第二步结果"><a href="#检验第二步结果" class="headerlink" title="检验第二步结果"></a>检验第二步结果</h4><p>$r_1$上面已经检验过了，这里只需要检验$r_3$和$r_4$即可。</p><p>对于关系模式$r_3$：</p><blockquote><p>对于属性$A$， $A^{+} = ABCDE$，包含了$r_3$的所有属性<br>对于属性$E$，$E^{+} = E$，不包含$r_3 - E$的任何属性</p></blockquote><p>对于关系模式$r_4$：</p><blockquote><p>对于属性$A$，$A^{+} = ABCDE$，而$r_4 - A = F$，$A^{+}$不包含$r_4 - A$的所有属性<br>对于属性$F$，$F^{+} = F$，不包含$r_3 - F$的任何属性</p></blockquote><p>综上，关系模式$r_3$,$r_4$，都已经满足BCNF条件</p><h4 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h4><p>已经检验过了，每一个关系模式都满足BCNF条件，因此，最终结果便是：</p><blockquote><p>$r_1(A,B,C,D)$<br>$r_3(A, E)$<br>$r_4(A, F)$</p></blockquote><h2 id="3NF分解实例"><a href="#3NF分解实例" class="headerlink" title="3NF分解实例"></a>3NF分解实例</h2><p>我觉得3NF比BCNF简单很多，不想写了hhh</p><h2 id="4NF分解实例"><a href="#4NF分解实例" class="headerlink" title="4NF分解实例"></a>4NF分解实例</h2><h3 id="分解原理"><a href="#分解原理" class="headerlink" title="分解原理"></a>分解原理</h3><p>关于4NF，其实课本P201上已经说明了检验模式是否满足4NF的方法。</p><p>一种方法便是4NF的定义，定义可以好好看看书本，和BCNF的定义类似，但问题在于这一个定义无法用于分解后的关系模式中。</p><p><img src="http://bit.ly/2OcpJ5v" alt=""></p><p>第二种方法可以用在分解后的关系模式，其实就是找到在分解后的关系模式上的限定$D_i$，然后对于该限定$D_i$里面的每一个依赖，都使用4NF的定义去检查是否满足条件。</p><p><img src="http://bit.ly/2Ohgf95" alt=""></p><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>$R = (A,B,C,G,H,I)$<br>$F = {$<br>$A \rightarrow\rightarrow B$,<br>$B \rightarrow\rightarrow HI$,<br>$CG \rightarrow\rightarrow H$<br>$}$</p><h3 id="分解流程"><a href="#分解流程" class="headerlink" title="分解流程"></a>分解流程</h3><h4 id="第一步分解-1"><a href="#第一步分解-1" class="headerlink" title="第一步分解"></a>第一步分解</h4><p>使用第一种方法来判断，注意到多值依赖是一种比函数依赖更弱的依赖，因此这里我觉得较难判断关系模式$R$的超码，就暂且认为该关系模式中的每一个属性都不是超码。</p><p>因为$A \rightarrow\rightarrow B$满足，且$A$不是关系模式$R$的超码，因此分解$R$得到</p><blockquote><p>$R_1(A,B)$<br>$R_2(A,C,G,H,I)$</p></blockquote><h4 id="判断第一步分解结果"><a href="#判断第一步分解结果" class="headerlink" title="判断第一步分解结果"></a>判断第一步分解结果</h4><p>判断分解后的关系模式是否满足4NF条件，需要使用第二种方法，这里需要计算函数依赖和多值依赖的集合$D$在$R_1$和$R_2$上的限定。</p><h5 id="判断1"><a href="#判断1" class="headerlink" title="判断1"></a>判断1</h5><p>先判断关系模式$R_1(A,B)$，我通过如下方式寻找函数依赖和多值依赖的集合$D$在$R_1$上的限定$D_1$:</p><blockquote><ol><li>$D^{+}$中所有只含有$R_1$中属性的函数依赖：无</li><li>所有形如$\alpha \rightarrow\rightarrow \beta \cap R_1$的多值依赖，其中$\alpha \in R_1$，且$\alpha \rightarrow\rightarrow \beta$ 属于$D^{+}$:<blockquote><p>当$\alpha = A$，能够找到$A\rightarrow\rightarrow B$，还有$A\rightarrow\rightarrow HI$，使用$\beta \cap R_1$处理后得到仅有$A\rightarrow\rightarrow B$在限定$D_1$中<br>当$\alpha = B$，能够找到$B\rightarrow\rightarrow HI$，使用$\beta \cap R_1$处理后发现没有多值依赖在限定$D_1$中</p></blockquote></li></ol></blockquote><p>因此函数依赖和多值依赖的集合$D$在$R_1$上的限定$D_1$为${ (A\rightarrow\rightarrow B) }$。</p><p>接下来判断限定里面的依赖是否能够让关系模式$R_1$满足4NF条件。因为在关系模式$R_1$中仅有两个属性$A,B$，因此多值依赖$A\rightarrow\rightarrow B$是一个平凡的多值依赖。因此满足4NF条件。</p><h5 id="判断2"><a href="#判断2" class="headerlink" title="判断2"></a>判断2</h5><p>判断关系模式$R_2(A,C,G,H,I)$是否满足4NF条件。</p><p>同样是两个步骤，显示找到函数依赖和多值依赖的集合$D$在$R_2$上的限定$D_2$，然后在限定$D_2$中，遍历每一个依赖关系，寻找是否有使得$R_2$不满足条件的依赖关系，若有则不满足4NF条件，若无则该关系模式满足4NF条件。</p><ol><li>在限定$D_2$中，我找到了这样的依赖关系$CG \rightarrow\rightarrow H$</li><li>该依赖关系并不平凡，并且$CG$也不是$R_2$的一个超码</li></ol><p>因此关系模式$R_2$不满足4NF条件，需要分解</p><h4 id="第二步分解-1"><a href="#第二步分解-1" class="headerlink" title="第二步分解"></a>第二步分解</h4><p>前面说到，根据依赖关系$CG \rightarrow\rightarrow H$，$R_2(A,C,G,H,I)$并不满足4NF条件。</p><p>因此进行分解得到以下关系模式</p><p>$R_3(C,G,H)$<br>$R_4(A,C,G,I)$</p><h4 id="判断第二步分解结果是否满足4NF条件"><a href="#判断第二步分解结果是否满足4NF条件" class="headerlink" title="判断第二步分解结果是否满足4NF条件"></a>判断第二步分解结果是否满足4NF条件</h4><p>然后又需要判断$R_3$,$R_4$是否满足4NF条件。</p><h5 id="判断-R-3"><a href="#判断-R-3" class="headerlink" title="判断$R_3$"></a>判断$R_3$</h5><p>判断仍然是两步走，先寻找函数依赖和多值依赖的集合$D$在$R_3$上的限定$D_3$，然后遍历该限定$D_3$中的每一个依赖关系。</p><ol><li>$D_3 = { (CG \rightarrow\rightarrow H) }$</li><li>$D_3$中仅有一个依赖关系，且$CG \rightarrow\rightarrow H$是一个平凡的多值依赖（因为$CG \cap H = R_3$），满足4NF条件</li></ol><p>因此$R_3$满足4NF条件</p><h5 id="判断-R-4"><a href="#判断-R-4" class="headerlink" title="判断$R_4$"></a>判断$R_4$</h5><p>对$R_4(A,C,G,I)$一样的方法，寻找$D_4$,然后遍历$D_4$。这里我会更详细地说明限定$D_4$的计算方法</p><blockquote><ol><li>$D^{+}$中所有只含有$R_4(A,C,H,I)$中属性的函数依赖：无</li><li>所有形如$\alpha \rightarrow\rightarrow \beta \cap R_4$的多值依赖，其中$\alpha \in R_4$，且$\alpha \rightarrow\rightarrow \beta$ 属于$D^{+}$:<blockquote><p>当$\alpha = A$，能够找到$A\rightarrow\rightarrow B$，还有$A\rightarrow\rightarrow HI$，使用$\beta \cap R_1$处理后得到仅有$A\rightarrow\rightarrow I$在限定$D_4$中<br>当$\alpha = C$，或$\alpha = H$ 或$\alpha = I$，均找不到符合条件的多值依赖<br>当$\alpha = AC$,$\alpha = AH$,$\alpha = AI$,等等等，所有子集都找不到符合条件的多值依赖</p></blockquote></li></ol></blockquote><p>因此$D_4 = { (A \rightarrow\rightarrow I) }$</p><p>对着一个函数依赖我会发现，$A$并不是关系模式$R_4$的主键，因此该关系模式不符合4NF条件。</p><h4 id="第三步分解"><a href="#第三步分解" class="headerlink" title="第三步分解"></a>第三步分解</h4><p>上面找到了$A \rightarrow\rightarrow I$让关系模式$R_4$不满足4NF条件，因此分解成以下两个关系模式</p><p>$R_5(A,I)$</p><p>$R_6(A,C,G)$</p><h4 id="判断第三步结果是否符合4NF条件"><a href="#判断第三步结果是否符合4NF条件" class="headerlink" title="判断第三步结果是否符合4NF条件"></a>判断第三步结果是否符合4NF条件</h4><p>判断的过程依然是两步走</p><h5 id="判断-R-5"><a href="#判断-R-5" class="headerlink" title="判断$R_5$"></a>判断$R_5$</h5><p>计算得到$D_5 = { (A\rightarrow\rightarrow I) }$</p><p>该依赖关系在$R_5$中是平凡的，因为$A \cap I = R_5$</p><p>因此$R_5$满足4NF条件</p><h5 id="判断-R-6"><a href="#判断-R-6" class="headerlink" title="判断$R_6$"></a>判断$R_6$</h5><p>计算$D_6$:</p><blockquote><ol><li>$D^{+}$中所有只含有$R_6(A,C,G)$中属性的函数依赖：无</li><li>所有形如$\alpha \rightarrow\rightarrow \beta \cap R_6$的多值依赖，其中$\alpha \in R_6$，且$\alpha \rightarrow\rightarrow \beta$ 属于$D^{+}$:<blockquote><p>当$\alpha = A$，能够找到$A\rightarrow\rightarrow B$，还有$A\rightarrow\rightarrow HI$，使用$\beta \cap R_1$处理后得找不到符合条件的多值依赖<br>当$\alpha = C$，或$\alpha = G$均找不到符合条件的多值依赖<br>当$\alpha = AC$,$\alpha = AG$,$\alpha = CG$,等等等，能够找到$CG \rightarrow\rightarrow H$，但是在使用$\beta \cap R_6$后，依然是空集</p></blockquote></li></ol></blockquote><p>因此，$D_6 = \emptyset$。</p><p>这个时候也可以说，对$D_6$中所有依赖，均满足4NF条件。</p><p>因此$R_6$满足4NF条件</p><h4 id="最终分解的结果"><a href="#最终分解的结果" class="headerlink" title="最终分解的结果"></a>最终分解的结果</h4><p>最终分解得到</p><blockquote><p>$R_1(A,B)$<br>$R_3(C,G,H)$<br>$R_5(A,I)$<br>$R_6(A,C,G)$</p></blockquote><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>总之就是严格按照课本定义，一点一点地推导和证明。</p><p>课本上的定义和方法实在是太过抽象了，我希望自己可以通过对这一些实例的详细探讨，对这一些分解方法有一个比较清晰的认识就好，昨天做作业的时候还是感觉自己迷迷糊糊的，现在就感觉，注意到了一些昨天没有注意到的细节，然后对书本这些理论的自洽性也有了一些比较深的理解，本来一些觉得诶好像证明不了的，回去一看看定义，哦原来是我对定义本身就不清楚……诸如此类的问题还是蛮多的.啊希望以后期末的时候对这一块的内容可以通过这篇博客更好地复习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;数据库关系模式的BCNF分解与4NF分解&quot;&gt;&lt;a href=&quot;#数
      
    
    </summary>
    
      <category term="Datebase" scheme="https://wwyf.github.io/categories/Datebase/"/>
    
    
      <category term="Datebase" scheme="https://wwyf.github.io/tags/Datebase/"/>
    
  </entry>
  
  <entry>
    <title>MPI</title>
    <link href="https://wwyf.github.io/2018/10/23/2018-10-2018-10-23-MPI/"/>
    <id>https://wwyf.github.io/2018/10/23/2018-10-2018-10-23-MPI/</id>
    <published>2018-10-23T01:08:47.000Z</published>
    <updated>2019-01-12T03:33:37.284Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;
      
    
    </summary>
    
      <category term="High Performance Calculate" scheme="https://wwyf.github.io/categories/High-Performance-Calculate/"/>
    
    
      <category term="High Performance Calculate" scheme="https://wwyf.github.io/tags/High-Performance-Calculate/"/>
    
  </entry>
  
  <entry>
    <title>关于word-embedding的理解</title>
    <link href="https://wwyf.github.io/2018/07/28/2018-07-2018-07-28-%E5%85%B3%E4%BA%8Eword-embedding%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://wwyf.github.io/2018/07/28/2018-07-2018-07-28-关于word-embedding的理解/</id>
    <published>2018-07-28T02:00:47.000Z</published>
    <updated>2019-01-12T03:33:37.284Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="关于word-embedding的理解与pytorch实现"><a href="#关于word-embedding的理解与pytorch实现" class="headerlink" title="关于word-embedding的理解与pytorch实现"></a>关于word-embedding的理解与pytorch实现</h1><p>在NLP中，计算机需要一种方法，表示一个单词。我们马上可以想到，可以直接使用ascii来保存呀，计算机也能够识别。</p><p>用ascii并不是不可以，但是，大家都知道，如果能够把单词表示成向量的形式，无论在怎样的数学处理中都会更加方便，即使是用ascii，最终也必须在计算机中有一种数学的方法表达，才能够完成后续的语义识别的工作。这种，为单词寻找到一种在计算机中表示的方法，可以称之为”Word embedding”(这里的定义是不完整的，后面继续补充。)</p><p>那么，什么办法可以表示一个单词呢？一种显而易见的办法是使用“one-hot encoding”,也就是说，每一个单词，在这样的一个向量中，都有一个独一不二的索引。对不同的词，便在不同的位置为1，其余的位置为0.</p><p><img src="http://bit.ly/2mNgfSX" alt=""></p><p>不妨将单词向量化后的那一个向量空间称之为单词空间？那么，对于单词空间中的每一个具有“one-hot encoding”性质的向量，我们都能够找到一个单词一一对应。</p><p>“one-hot encoding”已经解决了单词-单词空间向量的映射问题，但是，似乎不太好呢。大家都知道，每一个单词之间都有着或多或少的关联。<strong>one-hot encoding方法，将单词之间可能具有的关联信息全部都抛弃掉，只留下一一对应的性质</strong>，这样的单词嵌入方法，并不是特别的理想。</p><h2 id="真正的word-embedding的定义"><a href="#真正的word-embedding的定义" class="headerlink" title="真正的word-embedding的定义"></a>真正的word-embedding的定义</h2><p>摘自知乎</p><blockquote><p>Embedding在数学上表示一个maping, f: X -&gt; Y， 也就是一个function，其中该函数是injective（就是我们所说的单射函数，每个Y只有唯一的X对应，反之亦然）和structure-preserving (结构保存，比如在X所属的空间上X1 &lt; X2,那么映射后在Y所属空间上同理 Y1 &lt; Y2)。那么对于word embedding，就是将单词word映射到另外一个空间，其中这个映射具有injective和structure-preserving的特点。</p></blockquote><p>个人觉得这位网友说的还是很不错的。word embedding的关键在于两点</p><ol><li>单射</li><li><strong>结构保存</strong>（原本关联度较大的两个词，在新的向量空间中的相似度也应该较大？）</li></ol><h2 id="word-embedding的输入输出"><a href="#word-embedding的输入输出" class="headerlink" title="word-embedding的输入输出"></a>word-embedding的输入输出</h2><p>输入：一个单词<br>输出：这一个单词对应的向量</p><p>其中为了达到<strong>结构保存</strong>的目的，前期还需要很多的语料库进行训练。</p><h2 id="pytorch中的word-embedding"><a href="#pytorch中的word-embedding" class="headerlink" title="pytorch中的word embedding"></a>pytorch中的word embedding</h2><p>pytorch中预先已经提供了很多可用了“神经元层”，其中有一个<code>nn.Embedding(a,b)</code>就是专门用于完成“word embedding”工作的神经元层。该层的功能是：将一个具有$a$个单词的字典中的所有单词，映射到一个$b$维的向量空间中。</p><p>简单的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line">torch.manual_seed(<span class="number">1</span>)</span><br><span class="line">word_to_ix = &#123;<span class="string">"hello"</span>: <span class="number">0</span>, <span class="string">"world"</span>: <span class="number">1</span>&#125;</span><br><span class="line">embeds = nn.Embedding(<span class="number">2</span>, <span class="number">5</span>)  <span class="comment"># 2 words in vocab, 5 dimensional embeddings</span></span><br><span class="line">lookup_tensor = torch.tensor([word_to_ix[<span class="string">"hello"</span>]], dtype=torch.long)</span><br><span class="line"><span class="comment"># print(lookup_tensor)  # tensor([0])</span></span><br><span class="line">hello_embed = embeds(lookup_tensor) <span class="comment"># 输入单词索引即可</span></span><br><span class="line">print(hello_embed)</span><br></pre></td></tr></table></figure><h2 id="An-Example-N-Gram-Language-Modeling"><a href="#An-Example-N-Gram-Language-Modeling" class="headerlink" title="An Example: N-Gram Language Modeling"></a>An Example: N-Gram Language Modeling</h2><p>([ word_i-2, word_i-1 ], target word)</p><p>官网上提供了一个根据上文预测下一个单词的神经网络以供参考。代码我就不放上来了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>pytorch官方教程 <a href="https://pytorch.org/tutorials/beginner/nlp/word_embeddings_tutorial.html" target="_blank" rel="noopener">https://pytorch.org/tutorials/beginner/nlp/word_embeddings_tutorial.html</a></li><li>一个知乎的回答：<a href="https://www.zhihu.com/question/32275069/answer/80188672" target="_blank" rel="noopener">https://www.zhihu.com/question/32275069/answer/80188672</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;关于word-embedding的理解与pytorch实现&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="Machine-Learning" scheme="https://wwyf.github.io/categories/Machine-Learning/"/>
    
    
      <category term="Machine-Learning" scheme="https://wwyf.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>pytorch初学感想</title>
    <link href="https://wwyf.github.io/2018/07/27/2018-07-2018-07-27-pytorch%E5%88%9D%E5%AD%A6%E6%84%9F%E6%83%B3/"/>
    <id>https://wwyf.github.io/2018/07/27/2018-07-2018-07-27-pytorch初学感想/</id>
    <published>2018-07-27T12:03:57.000Z</published>
    <updated>2019-01-12T03:33:37.284Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="pytorch初学感想"><a href="#pytorch初学感想" class="headerlink" title="pytorch初学感想"></a>pytorch初学感想</h1><p>一开始是通过莫烦的python教程来进行学习的。他的教程有一个特点，丰富的样例代码，加上对一些细节的讲解，让我能够很快的上手pytorch。不过，我看完，总觉得还缺点什么？有一些机制我始终没有想的特别明白，就像我对<code>loss.backword()</code> <code>optimizer.step()</code>， 这几个函数的作用始终一知半解，虽然大概知道一点，但是对使用pytorch实现的神经网络，还是有一些没法想清楚的地方。</p><h2 id="官方教程"><a href="#官方教程" class="headerlink" title="官方教程"></a>官方教程</h2><p>pytorch的官方教程，有一篇我觉得写得特别好，可以说是给初学者稍微打开了pytorch背后封装的一些操作，让这一个黑盒，至少看起来不那么黑，自己写起代码来心中也有一些B数。</p><p><a href="https://pytorch.org/tutorials/beginner/pytorch_with_examples.html" target="_blank" rel="noopener">https://pytorch.org/tutorials/beginner/pytorch_with_examples.html</a></p><p>这个教程我最喜欢的一点，是它从一个使用numpy实现的两层神经网络（输入层不算一层）开始， 一点点改造成具有纯正“pytorch”风味的神经网络。这样子的教程，消除了我对pytorch封装的担心，内部的操作顿时清晰了很多。</p><h2 id="使用numpy实现神经网络？"><a href="#使用numpy实现神经网络？" class="headerlink" title="使用numpy实现神经网络？"></a>使用numpy实现神经网络？</h2><p>当然可以了~</p><p>下面把原教程的代码抄了过来，加上了自己的一点点注释。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># N is batch size; D_in is input dimension;</span></span><br><span class="line"><span class="comment"># H is hidden dimension; D_out is output dimension.</span></span><br><span class="line">N, D_in, H, D_out = <span class="number">64</span>, <span class="number">1000</span>, <span class="number">100</span>, <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create random input and output data</span></span><br><span class="line">x = np.random.randn(N, D_in)</span><br><span class="line">y = np.random.randn(N, D_out)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Randomly initialize weights</span></span><br><span class="line">w1 = np.random.randn(D_in, H)</span><br><span class="line">w2 = np.random.randn(H, D_out)</span><br><span class="line"></span><br><span class="line">learning_rate = <span class="number">1e-6</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">500</span>):</span><br><span class="line">    <span class="comment"># Forward pass: compute predicted y</span></span><br><span class="line">    <span class="comment"># 这是矩阵相乘，(N行D_in列) * (D_in行H列)，算出来(N行，H列)的矩阵，其中第i行第j列的元素表示，第i个输入对应的第j个隐藏层神经元的输出</span></span><br><span class="line">    h = x.dot(w1)</span><br><span class="line">    <span class="comment"># 这里就是relu函数啦，相比起来我们喜闻乐见的relu函数，这里不过是用矩阵的方式，使用这个函数本身的定义来计算。查一下relu函数就清楚了</span></span><br><span class="line">    h_relu = np.maximum(h, <span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 再一次矩阵线程，算出输出层神经元的输出值</span></span><br><span class="line">    y_pred = h_relu.dot(w2)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Compute and print loss</span></span><br><span class="line">    <span class="comment"># 差的平方再求和</span></span><br><span class="line">    loss = np.square(y_pred - y).sum()</span><br><span class="line">    print(t, loss)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Backprop to compute gradients of w1 and w2 with respect to loss</span></span><br><span class="line">    <span class="comment"># 下面就是具体计算梯度的方法，这个计算方法如何得出来的，大概可以参考《机器学习》周志华书上的数学证明 P102-104</span></span><br><span class="line">    grad_y_pred = <span class="number">2.0</span> * (y_pred - y)</span><br><span class="line">    grad_w2 = h_relu.T.dot(grad_y_pred)</span><br><span class="line">    grad_h_relu = grad_y_pred.dot(w2.T)</span><br><span class="line">    grad_h = grad_h_relu.copy()</span><br><span class="line">    grad_h[h &lt; <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    grad_w1 = x.T.dot(grad_h)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Update weights</span></span><br><span class="line">    w1 -= learning_rate * grad_w1</span><br><span class="line">    w2 -= learning_rate * grad_w2</span><br></pre></td></tr></table></figure><h2 id="如何将上面的神经网络pytorch化？"><a href="#如何将上面的神经网络pytorch化？" class="headerlink" title="如何将上面的神经网络pytorch化？"></a>如何将上面的神经网络pytorch化？</h2><p>pytorch为神经网络的编写，提供了一些方便的接口，用以替代上面的部分代码</p><ol><li>numpy中的array不能够跑在GPU上计算，而与之功能类似的<code>torch.tensor</code>可以跑在GPU上</li><li>梯度的计算，pytorch中提供接口能够自动算<ol><li>tensor中有一个grad成员用于存放梯度</li><li>tensor对象在进行运算的时候，会自动建造一张计算图（<strong>computational graph</strong> ）</li><li>在计算损失后，能够调用<code>backwoard()</code>，算出用于计算这个损失涉及到的有关tensor（requires_grad=True）的梯度，并存到对应的tensor的grad成员中。</li></ol></li><li>优化器的选择：pytorch中提供了多种优化器，用以取代显式的使用梯度修改</li><li>神经网络模型的建立，能够通过高层接口，简单的增加层，而不用自己麻烦的定义参数矩阵再进行相乘</li><li>损失的计算：pytorch中同样提供了多种损失函数</li></ol><p>以上每一个点，在原教程中都有对应的代码用来与原代码对比。最终，我们得到了下面的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># N is batch size; D_in is input dimension;</span></span><br><span class="line"><span class="comment"># H is hidden dimension; D_out is output dimension.</span></span><br><span class="line">N, D_in, H, D_out = <span class="number">64</span>, <span class="number">1000</span>, <span class="number">100</span>, <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create random Tensors to hold inputs and outputs</span></span><br><span class="line">x = torch.randn(N, D_in)</span><br><span class="line">y = torch.randn(N, D_out)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use the nn package to define our model and loss function.</span></span><br><span class="line">model = torch.nn.Sequential(</span><br><span class="line">    torch.nn.Linear(D_in, H),</span><br><span class="line">    torch.nn.ReLU(),</span><br><span class="line">    torch.nn.Linear(H, D_out),</span><br><span class="line">)</span><br><span class="line">loss_fn = torch.nn.MSELoss(size_average=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use the optim package to define an Optimizer that will update the weights of</span></span><br><span class="line"><span class="comment"># the model for us. Here we will use Adam; the optim package contains many other</span></span><br><span class="line"><span class="comment"># optimization algoriths. The first argument to the Adam constructor tells the</span></span><br><span class="line"><span class="comment"># optimizer which Tensors it should update.</span></span><br><span class="line">learning_rate = <span class="number">1e-4</span></span><br><span class="line">optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">500</span>):</span><br><span class="line">    <span class="comment"># Forward pass: compute predicted y by passing x to the model.</span></span><br><span class="line">    y_pred = model(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Compute and print loss.</span></span><br><span class="line">    loss = loss_fn(y_pred, y)</span><br><span class="line">    print(t, loss.item())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Before the backward pass, use the optimizer object to zero all of the</span></span><br><span class="line">    <span class="comment"># gradients for the variables it will update (which are the learnable</span></span><br><span class="line">    <span class="comment"># weights of the model). This is because by default, gradients are</span></span><br><span class="line">    <span class="comment"># accumulated in buffers( i.e, not overwritten) whenever .backward()</span></span><br><span class="line">    <span class="comment"># is called. Checkout docs of torch.autograd.backward for more details.</span></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Backward pass: compute gradient of the loss with respect to model</span></span><br><span class="line">    <span class="comment"># parameters</span></span><br><span class="line">    loss.backward()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Calling the step function on an Optimizer makes an update to its</span></span><br><span class="line">    <span class="comment"># parameters</span></span><br><span class="line">    optimizer.step()</span><br></pre></td></tr></table></figure><p>代码其实少了很多，通过与原来numpy编写的神经网络对比，也更好的理解各个高层接口的作用。</p><blockquote><p>我个人觉得，编写框架的人总是喜欢把高层接口控制得尽可能优雅，就如同现在我们所使用的pytorch一样，事实上，有了pytorch的优雅的高层接口 ，十多二十行足以编写一个可以玩一玩的神经网络。然而，作为初学者而言，我们总是很难把握高层接口的作用，在使用的时候总是很不踏实，可以说，对高层接口又爱又恨，万一出bug了呢，怎么改呀，高层接口帮我做了啥我也不知道呀。官方教程这样子从底层开始展示细节到使用高层接口替换的教程，恰巧将初学者在学习过程中的不安给打消了。不管怎么说，我觉得官方的教程写的棒棒哒！让我感觉自己在调用高层api的时候心安了不少:joy:。</p></blockquote><h2 id="自定义nn模块还有autograd函数？"><a href="#自定义nn模块还有autograd函数？" class="headerlink" title="自定义nn模块还有autograd函数？"></a>自定义nn模块还有autograd函数？</h2><p>都可以都可以，我建议自己试多几把，这样子对这个框架也能够更加地熟悉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;pytorch初学感想&quot;&gt;&lt;a href=&quot;#pytorch初学感
      
    
    </summary>
    
      <category term="python" scheme="https://wwyf.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://wwyf.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>pytorch中的unsqueeze函数</title>
    <link href="https://wwyf.github.io/2018/07/27/2018-07-2018-07-27-pytorch%E4%B8%AD%E7%9A%84unsqueeze%E5%87%BD%E6%95%B0/"/>
    <id>https://wwyf.github.io/2018/07/27/2018-07-2018-07-27-pytorch中的unsqueeze函数/</id>
    <published>2018-07-27T07:33:37.000Z</published>
    <updated>2019-01-12T03:33:37.284Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="pytorch中的unsqueeze函数"><a href="#pytorch中的unsqueeze函数" class="headerlink" title="pytorch中的unsqueeze函数"></a>pytorch中的unsqueeze函数</h1><p>一直对pytorch中的<code>unsqueeze</code>不太理解，官方文档的解释是：</p><blockquote><p>Returns a new tensor with a dimension of size one inserted at the specified position.</p><p>The returned tensor shares the same underlying data with this tensor.</p></blockquote><p>其实说的已经很清楚了，但是在我搞懂这个问题前，一直没有看懂这段说明的意思，因此做了一些实验来验证自己的想法。将自己的感想放到博客上，以供以后忘记了再回看复习。</p><h2 id="一句话解释"><a href="#一句话解释" class="headerlink" title="一句话解释"></a>一句话解释</h2><p>这个函数的意思，就是</p><ol><li>往原有的数据中，增加一个维度</li><li>增加的维度值，必须是1</li></ol><h2 id="实验验证"><a href="#实验验证" class="headerlink" title="实验验证"></a>实验验证</h2><p>随便弄了个这样的矩阵来进行实验</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">arr = array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">        [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">        [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]]])</span><br><span class="line">        </span><br><span class="line"><span class="comment"># In [53]: arr.shape</span></span><br><span class="line"><span class="comment"># Out[53]: (3, 2, 4)</span></span><br></pre></td></tr></table></figure><p>结果见下面的截图</p><p><img src="http://bit.ly/2AaD5gE" alt=""></p><h2 id="对numpy中维度的理解"><a href="#对numpy中维度的理解" class="headerlink" title="对numpy中维度的理解"></a>对numpy中维度的理解</h2><p><a href="https://flat2010.github.io/2017/05/31/Numpy%E6%95%B0%E7%BB%84%E8%A7%A3%E6%83%91/" target="_blank" rel="noopener">https://flat2010.github.io/2017/05/31/Numpy%E6%95%B0%E7%BB%84%E8%A7%A3%E6%83%91/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;pytorch中的unsqueeze函数&quot;&gt;&lt;a href=&quot;#p
      
    
    </summary>
    
      <category term="test" scheme="https://wwyf.github.io/categories/test/"/>
    
    
      <category term="test" scheme="https://wwyf.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>ftp服务器+内网穿透</title>
    <link href="https://wwyf.github.io/2018/07/26/2018-07-2018-07-26-ftp%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <id>https://wwyf.github.io/2018/07/26/2018-07-2018-07-26-ftp服务器-内网穿透/</id>
    <published>2018-07-26T09:22:51.000Z</published>
    <updated>2019-01-12T03:33:37.284Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>花了一下下午时间，做了自己的ftp服务器。</p><ol><li>配置具有多用户多权限多目录的ftp服务器</li><li>内网测试</li><li>买一个域名？绑定到云服务器上</li><li>使用frp完成内网穿透</li><li>几个比较重要的坑<ol><li>必须使用被动模式</li><li>vsftpd的被动模式设置数据端口段，并使用frp进行转发</li></ol></li></ol><p>主要分为两个内容来记录一下这一次的配置。</p><h1 id="配置多用户多权限多目录的ftp服务器"><a href="#配置多用户多权限多目录的ftp服务器" class="headerlink" title="配置多用户多权限多目录的ftp服务器"></a>配置多用户多权限多目录的ftp服务器</h1><p>考虑到自己需要去弄多个用户都可以登录并且还具有不同权限的ftp服务器，我在网上找到了这样的一个教程，然后自己在理解了这个教程的基础上，对一些指令进行了适当的改动。</p><p><a href="http://forum.ubuntu.org.cn/viewtopic.php?t=368282" target="_blank" rel="noopener">http://forum.ubuntu.org.cn/viewtopic.php?t=368282</a></p><p>为了防止该网站gg，我记录一下。</p><p><img src="http://bit.ly/2Ok9k0e" alt=""></p><h2 id="我自己的配置"><a href="#我自己的配置" class="headerlink" title="我自己的配置"></a>我自己的配置</h2><p>我把有关用户的配置都放在了/etc/vsftpd里面，并且把一些重要的文件的权限设置为600，这样的话，就无法查看与数据库对应的用户名密码的文件。</p><h2 id="还有一个坑"><a href="#还有一个坑" class="headerlink" title="还有一个坑"></a>还有一个坑</h2><p>vsftpd-500-oops-cannot-change-directory</p><p>关于这一个错误，可能有好几种原因。</p><p>我见过的有，</p><ol><li>补上这一条指令，可能就可以了（<img src="http://bit.ly/2OhbZrn" alt=""> <code>allow_writeable_chroot=YES</code></li><li>可能是对应的文件夹还没有创建（傻逼错误了这是）</li></ol><h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><p>大概的配置其实还是挺简单的，frp本身就易用，然后我在这一次的配置中，使用到了supervisor对frp进程进行守护。</p><h2 id="使用supervisor对frp进行守护"><a href="#使用supervisor对frp进行守护" class="headerlink" title="使用supervisor对frp进行守护"></a>使用supervisor对frp进行守护</h2><p><a href="https://diannaobos.com/post/535.html" target="_blank" rel="noopener">https://diannaobos.com/post/535.html</a><br>主要参考了这一篇博客来进行配置，注意到日志文件的输出也是在配置文件里面定义好的。</p><h2 id="配置服务器端"><a href="#配置服务器端" class="headerlink" title="配置服务器端"></a>配置服务器端</h2><p>frps.ini</p><p><img src="http://bit.ly/2A8E1m0" alt=""></p><p>很贴心的提供了token，防止别人偷偷用自己的服务器做内网穿透</p><h2 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h2><p>注意客户端的token要和服务器端的一致就好</p><p><img src="http://bit.ly/2mHzBZs" alt=""></p><h2 id="一个坑点"><a href="#一个坑点" class="headerlink" title="一个坑点"></a>一个坑点</h2><p>在清楚ftp主动模式和被动模式之后，其实我们很容易发现，在使用一台外网服务器去做内网穿透后，我们如果使用主动模式访问ftp服务器，是会出问题的。</p><p><a href="https://github.com/fatedier/frp/issues/219" target="_blank" rel="noopener">https://github.com/fatedier/frp/issues/219</a></p><p>主要参考了这一个issue解决了这个问题。</p><p>不过有一个显示，只能够使用被动模式访问ftp服务器，如果使用主动模式是完全行不通的。</p><h1 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h1><p>注意了，如果使用域名访问的话只能够使用被动模式来访问，在命令行中，linux的ftp命令可以通过passive切换主被动模式，而window下好像没有被动模式？</p><p>注意一点：使用域名的话，必须使用被动模式，而如果使用中大内网ip的话则必须使用主动模式，不能使用被动模式（原因有点复杂），不过中大内网速度飞快啊10mb/s</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;花了一下下午时间，做了自己的ftp服务器。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;配置具
      
    
    </summary>
    
      <category term="Tools" scheme="https://wwyf.github.io/categories/Tools/"/>
    
    
      <category term="Tools" scheme="https://wwyf.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>信号量应用实例</title>
    <link href="https://wwyf.github.io/2018/07/13/2018-07-2018-07-13-%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/"/>
    <id>https://wwyf.github.io/2018/07/13/2018-07-2018-07-13-信号量应用实例/</id>
    <published>2018-07-12T16:20:57.000Z</published>
    <updated>2019-01-12T03:33:37.284Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="使用信号量解决这样的问题"><a href="#使用信号量解决这样的问题" class="headerlink" title="使用信号量解决这样的问题"></a>使用信号量解决这样的问题</h2><blockquote><p>某操作系统支持信号量机制，系统中有一组进程A、B、C、D和E共5个合作进程，它们中各有一个操作，分别记为a, b, c, d和e，这些操作需要按下面的时序推进：操作a完成后才可以开始操作b和操作c；操作b完成后才可以开始操作d，操作c和操作d完成后才能开始操作e。请在这5个进程的程序中描述如何利用信号量实现规定的同步，要求说明用到几个信号量，每个信号量的初值是什么。 </p></blockquote><h2 id="一些说明"><a href="#一些说明" class="headerlink" title="一些说明"></a>一些说明</h2><p>使用信号量实现一些进程的按序执行，一般可以按照这样的做法。</p><p>若B进程必须等候A进程的进行，以下是简单的代码说明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">s a_finished = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* a */</span></span><br><span class="line"></span><br><span class="line">    V(a_finished);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">B</span><span class="params">()</span></span>&#123;</span><br><span class="line">    P(a_finished);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* b  */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="这一道题"><a href="#这一道题" class="headerlink" title="这一道题"></a>这一道题</h2><h3 id="使用到的信号量"><a href="#使用到的信号量" class="headerlink" title="使用到的信号量"></a>使用到的信号量</h3><p>注意，使用的都是计数信号量</p><table><thead><tr><th>信号量名称</th><th>信号量作用</th></tr></thead><tbody><tr><td>a_finished</td><td>将“a已完成任务”作为一种信号，给进程B，进程C领取</td></tr><tr><td>b_finished</td><td>“b已完成任务”，告诉d进程</td></tr><tr><td>c_finished</td><td>“c已完成任务”，告诉e进程</td></tr><tr><td>d_finished</td><td>“d已完成任务”，告诉e进程</td></tr></tbody></table><h3 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">s a_finished = <span class="number">0</span>;</span><br><span class="line">s b_finished = <span class="number">0</span>;</span><br><span class="line">s c_finished = <span class="number">0</span>;</span><br><span class="line">s d_finished = <span class="number">0</span>;</span><br><span class="line">s e_finished = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* a */</span></span><br><span class="line"></span><br><span class="line">    V(a_finished);</span><br><span class="line">    V(a_finished);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">B</span><span class="params">()</span></span>&#123;</span><br><span class="line">    P(a_finished);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* b  */</span></span><br><span class="line"></span><br><span class="line">    V(b_finished);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">C</span><span class="params">()</span></span>&#123;</span><br><span class="line">    P(a_finished);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* c */</span></span><br><span class="line"></span><br><span class="line">    V(c_finished);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">D</span><span class="params">()</span></span>&#123;</span><br><span class="line">    P(b_finished);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* d */</span></span><br><span class="line"></span><br><span class="line">    V(d_finished);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">E</span><span class="params">()</span></span>&#123;</span><br><span class="line">    P(d_finished);</span><br><span class="line">    P(c_finished);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* e */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    parbegin(A(),B(),C(),D(),E());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;使用信号量解决这样的问题&quot;&gt;&lt;a href=&quot;#使用信号量解决这样
      
    
    </summary>
    
      <category term="test" scheme="https://wwyf.github.io/categories/test/"/>
    
    
      <category term="test" scheme="https://wwyf.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>使用信号量解决互斥问题</title>
    <link href="https://wwyf.github.io/2018/07/08/2018-07-2018-07-08-%E4%BD%BF%E7%94%A8%E4%BF%A1%E5%8F%B7%E9%87%8F%E8%A7%A3%E5%86%B3%E4%BA%92%E6%96%A5%E9%97%AE%E9%A2%98/"/>
    <id>https://wwyf.github.io/2018/07/08/2018-07-2018-07-08-使用信号量解决互斥问题/</id>
    <published>2018-07-08T07:21:47.000Z</published>
    <updated>2019-01-12T03:33:37.284Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="使用信号量解决同步问题"><a href="#使用信号量解决同步问题" class="headerlink" title="使用信号量解决同步问题"></a>使用信号量解决同步问题</h1><h2 id="信号量定义"><a href="#信号量定义" class="headerlink" title="信号量定义"></a>信号量定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">semaphore</span>&#123;</span> <span class="comment">//定义结构</span></span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    queueType *<span class="built_in">queue</span>;</span><br><span class="line">&#125;s;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">P</span><span class="params">(semaphore s)</span> </span>&#123; <span class="comment">// P操作</span></span><br><span class="line">    s.count--;</span><br><span class="line">    <span class="keyword">if</span> (s.count&lt;<span class="number">0</span>)  </span><br><span class="line">       Block(CurruntProcess, s.<span class="built_in">queue</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">V</span><span class="params">(semaphore s)</span> </span>&#123;<span class="comment">// V操作</span></span><br><span class="line">    s.count++;</span><br><span class="line">    <span class="keyword">if</span> (s.count&lt;=<span class="number">0</span>)  </span><br><span class="line">       WakeUp(s.<span class="built_in">queue</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用信号量实现进程同步"><a href="#用信号量实现进程同步" class="headerlink" title="用信号量实现进程同步"></a>用信号量实现进程同步</h2><p>系统中的一些进程需要相互合作，共同完成一项任务。具体来说，一个进程运行到某一点时，要求另一伙伴进程为它提供消息，在未获得消息之前，该进程处于阻塞状态，获得消息后被唤醒进入就绪状态。</p><p>这里有一个例子是：司机与售票员之间的同步。只有当售票员关门了，司机才可以进行启动汽车，而且只有当司机到站停车了，售票员才能够开门。</p><h3 id="信号量实现进程同步"><a href="#信号量实现进程同步" class="headerlink" title="信号量实现进程同步"></a>信号量实现进程同步</h3><p>进程$P_I$将输入的数据写入缓冲区$B_1$,<br>进程$P_C$读出$B_1$中的数据，完成计算，把结果写入缓冲区$B_2$<br>进程$P_P$读出$B_2$中的结果，打印输出</p><p>这三个进程之间的同步要求有两点</p><ol><li>先写后读（不能读空缓冲区）</li><li>未读完不能写（不能写非空缓冲区）</li></ol><p><img src="https://lh3.googleusercontent.com/-ugfRbGmn9sw/W0HCOZ220uI/AAAAAAAAI2U/CZyBocvneOcYFZ_mQUfiBTp60-J7VECSQCHMYCw/s0/POWERPNT_2018-07-08_15-50-15.png" alt=""></p><p>对于这个问题，使用信号量可以这样解决</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">semaphore empty1 = <span class="number">1</span>;</span><br><span class="line">semaphore full1 = <span class="number">0</span>;</span><br><span class="line">semaphore empry2 = <span class="number">1</span>;</span><br><span class="line">semaphore full2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对PI进程而言</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">    P(empty1);</span><br><span class="line">    <span class="comment">// 将数据写到B1</span></span><br><span class="line">    V(full1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对PC进程而言</span></span><br><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> ) &#123;</span><br><span class="line">    P(full1);</span><br><span class="line">    <span class="comment">// 从B1中读取数据;</span></span><br><span class="line">    V(empty1);</span><br><span class="line">    <span class="comment">// 计算;</span></span><br><span class="line">    P(empty2);</span><br><span class="line">    <span class="comment">// 结果写到B2;</span></span><br><span class="line">    V(full2);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 对PP进程而言</span></span><br><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> ) &#123;</span><br><span class="line">    P(full2);</span><br><span class="line">    <span class="comment">// 读取B2中的结果并输出到打印机;</span></span><br><span class="line">    V(empty2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生产者-消费者问题"><a href="#生产者-消费者问题" class="headerlink" title="生产者/消费者问题"></a>生产者/消费者问题</h2><p>并发处理的最常见问题类型</p><p>问题描述</p><ol><li>若干进程通过无限/有限的共享缓冲区交换数据</li><li>一组“生产者”进程不断写入</li><li>另一组“消费者”进程不断读出</li><li>共享缓冲区无限/共有N个</li><li>任何时刻只能有一个进程可对共享缓冲区进行操作</li></ol><h3 id="基于计数信号量的正确解决方案"><a href="#基于计数信号量的正确解决方案" class="headerlink" title="基于计数信号量的正确解决方案"></a>基于计数信号量的正确解决方案</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">semaphore n=<span class="number">0</span>; <span class="comment">/*缓冲区中的产品数*/</span></span><br><span class="line">semaphore s=<span class="number">1</span>; <span class="comment">/*互斥*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">producer</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>)  &#123;</span><br><span class="line">    produce();</span><br><span class="line"></span><br><span class="line">    semWait(s);</span><br><span class="line">    append();</span><br><span class="line">    semSignal(s);</span><br><span class="line"></span><br><span class="line">    semSignal(n);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>)  &#123;</span><br><span class="line">    semWait(n);</span><br><span class="line"></span><br><span class="line">    semWait(s);</span><br><span class="line">    take();</span><br><span class="line">    semSignal(s);</span><br><span class="line"></span><br><span class="line">    consume();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">   parbegin(producer, consumer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于二元信号量的正确解决方案"><a href="#基于二元信号量的正确解决方案" class="headerlink" title="基于二元信号量的正确解决方案"></a>基于二元信号量的正确解决方案</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">Binary_semaphore s=<span class="number">1</span>; <span class="comment">// 用于控制缓冲区变量的互斥访问</span></span><br><span class="line">Binary_semaphore delay=<span class="number">0</span>; <span class="comment">// 用于确定能否访问缓冲区，如果缓冲区为空，阻塞消费者</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">producer</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>)  &#123;</span><br><span class="line">    produce();</span><br><span class="line">    semWaitB(s);</span><br><span class="line">    append();</span><br><span class="line">    n++;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">1</span>)  semSignalB(delay);</span><br><span class="line">    semSignalB(s);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> m;</span><br><span class="line">  semWaitB(delay);</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>)  &#123;</span><br><span class="line">    semWaitB(s);</span><br><span class="line">    take();</span><br><span class="line">    n--;</span><br><span class="line">    m=n;</span><br><span class="line">    semSignalB(s);</span><br><span class="line">    consume();</span><br><span class="line">    <span class="keyword">if</span> (m==<span class="number">0</span>)  semWaitB(delay);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有限循环缓冲区的解决方案"><a href="#有限循环缓冲区的解决方案" class="headerlink" title="有限循环缓冲区的解决方案"></a>有限循环缓冲区的解决方案</h3><p>一种这样的思想：生产者在将产品放入缓冲区前，先申请一个空闲位置（空闲信号量-1），然后在将产品放入到缓冲区中，然后再申请增加一个产品。（感觉是一种比较保守的做法）</p><p>消费者也是采取了一种保守的做法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> sizebuffer=N</span><br><span class="line">semaphore n=<span class="number">0</span>; <span class="comment">/*产品数*/</span></span><br><span class="line">semaphore s=<span class="number">1</span>;  <span class="comment">/*互斥*/</span></span><br><span class="line">semaphore e=N; <span class="comment">/*空闲数*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">producer</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>)  &#123;</span><br><span class="line">    produce();</span><br><span class="line">    semWait(e);</span><br><span class="line"></span><br><span class="line">    semWait(s);</span><br><span class="line">    append();</span><br><span class="line">    semSignal(s);</span><br><span class="line"></span><br><span class="line">    semSignal(n);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>)  &#123;</span><br><span class="line">    semWait(n);</span><br><span class="line"></span><br><span class="line">    semWait(s);</span><br><span class="line">    take();</span><br><span class="line">    semSignal(s);</span><br><span class="line"></span><br><span class="line">    semSignal(e);</span><br><span class="line">    consume();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">   parbegin(producer, consumer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写者-读者问题"><a href="#写者-读者问题" class="headerlink" title="写者/读者问题"></a>写者/读者问题</h2><p>同步与并发机制设计的著名问题<br>问题描述</p><ol><li>有一个多个进程共享的数据区，有一些只读取这个数据区的进程(reader)和一些只往数据区中写数据的进程(writer)</li></ol><p>必须满足下列条件：</p><ol><li>任意多的读进程可以同时读这个数据区</li><li>一次只有一个写进程可以往数据区写</li><li>如果一个写进程正在往数据区中写，禁止任何读进程读数据区</li></ol><h3 id="读者优先信号量方案"><a href="#读者优先信号量方案" class="headerlink" title="读者优先信号量方案"></a>读者优先信号量方案</h3><ol><li>一旦有一个读进程正在读，写进程就一直被阻塞</li><li>直到没有读进程在读了写进程才可以在写。</li><li>读者优先，写者可能饥饿</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* program reader_and_writer */</span></span><br><span class="line"><span class="keyword">int</span> readcount;  </span><br><span class="line">semaphore x=<span class="number">1</span>; <span class="comment">// 用于保证readcount被正确更新</span></span><br><span class="line">semaphore wsem=<span class="number">1</span>;  <span class="comment">// 用于实现互斥</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">      P(x);</span><br><span class="line">      readcount++;</span><br><span class="line">      <span class="comment">// 如果本来没有进程在读，这是第一个进程，就需要防止该单元被写</span></span><br><span class="line">      <span class="keyword">if</span> (readcount==<span class="number">1</span>) P(wsem);</span><br><span class="line">      V(x);</span><br><span class="line">      READUNIT();</span><br><span class="line">      P(x);</span><br><span class="line">      readcount--;</span><br><span class="line">      <span class="comment">// 如果没有进程在读了，这是最后一个进程，就需要释放这一个单元</span></span><br><span class="line">      <span class="keyword">if</span> (readcount==<span class="number">0</span>) V(wsem);</span><br><span class="line">      V(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">      P(wsem);</span><br><span class="line">      WRITEUNIT();</span><br><span class="line">      V(wsem);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   readcount=<span class="number">0</span>;</span><br><span class="line">   parbegin(reader(), writer());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写者优先信号量方案"><a href="#写者优先信号量方案" class="headerlink" title="写者优先信号量方案"></a>写者优先信号量方案</h3><p>为了保证写进程优先，写进程声明想写时，不允许新的读进程访问该数据块。</p><p>一旦有一个写者要写，读者就无法读取，读者只能够等待所有写者写完才能够进行读取。</p><ol><li>当写进程声明想写时，不允许有新的进程继续读</li><li>思路<ol><li>读进程在一个队列上进行排队（信号量z）<ol><li>信号量z初值设为1，这就意味着所有想要读的进程想要排队的时候，只有一个能够排到队头去获取读的权力</li><li>概括：通过信号量z，多个读者在队列中排队，并且每次只能够派出一名读者尝试获取读的权力</li></ol></li><li>尝试获取读的权力（信号量rsem）<ol><li>rsem信号量，读者写者都在争取，写者获得了运行权限后，第一个写者会锁住“读的权力”rsem信号量，从而此时的读者无法获得读的权力，阻塞着</li><li>若此时仍有写者要来写，writecount的值会大于1，因此rsem不会被第一个写者立马释放。</li><li>实现了：一旦有一个写者要写，读者就无法读取，读者只能够等待所有写者写完才能够进行读取。</li></ol></li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* program reader_and_writer */</span></span><br><span class="line"><span class="keyword">int</span> readcount, writecount;  </span><br><span class="line">semaphore x=<span class="number">1</span>, y=<span class="number">1</span>, z=<span class="number">1</span>, rsem=<span class="number">1</span>, wsem=<span class="number">1</span>; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">信号量z：</span></span><br><span class="line"><span class="comment">信号量x：控制readcount的更新</span></span><br><span class="line"><span class="comment">-------------------------</span></span><br><span class="line"><span class="comment">writecount：控制rsem的设置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">信号量rsem : 『读的权力』当有写进程准备访问数据区的时候，用于禁止所有的读进程</span></span><br><span class="line"><span class="comment">信号量wsem：『写的权力』</span></span><br><span class="line"><span class="comment">信号量y：控制writecount的更新</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">       <span class="comment">// rsem表示『读的权力』，应该像一个二元信号量一样</span></span><br><span class="line">       <span class="comment">// 有了z在rsem前面，那么rsem最多被读进程要一次，其他的进程都会在z上排队。</span></span><br><span class="line">      P(z); P(rsem); </span><br><span class="line"> P(x);</span><br><span class="line">      readcount++;</span><br><span class="line">      <span class="keyword">if</span> (readcount==<span class="number">1</span>) P(wsem);</span><br><span class="line">      V(x); </span><br><span class="line"> V(rsem); V(z);</span><br><span class="line"> READUNIT();</span><br><span class="line">      P(x);</span><br><span class="line">      readcount--;</span><br><span class="line">      <span class="keyword">if</span> (readcount==<span class="number">0</span>) V(wsem);</span><br><span class="line">      V(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">      P(y); </span><br><span class="line">      writecount++;</span><br><span class="line">      <span class="keyword">if</span> (writecount==<span class="number">1</span>) P(rsem);</span><br><span class="line">      V(y);</span><br><span class="line">      P(wsem);</span><br><span class="line">      WRITEUNIT();</span><br><span class="line">      V(wsem);</span><br><span class="line">      P(y); </span><br><span class="line">      writecount--;</span><br><span class="line">      <span class="keyword">if</span> (writecount==<span class="number">0</span>) V(rsem);</span><br><span class="line">      V(y);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   readcount = writecount = <span class="number">0</span>;</span><br><span class="line">   parbegin(reader(), writer());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="公平方案"><a href="#公平方案" class="headerlink" title="公平方案"></a>公平方案</h3><p>如何体现公平？</p><p>读者/写者的公平方案是指：无论读者还是写者，都有可能获取到一个锁用以锁住文件访问权限。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> read-justice()&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    p(q);</span><br><span class="line"></span><br><span class="line">    p(rcountsem)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rcount == <span class="number">0</span>)</span><br><span class="line">      p(fsem)</span><br><span class="line">    rcount++;</span><br><span class="line"></span><br><span class="line">    r(rcountsem)</span><br><span class="line">    </span><br><span class="line">    v(q) ; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// reading... </span></span><br><span class="line"></span><br><span class="line">    p(rcountsem)</span><br><span class="line"></span><br><span class="line">    rcount--;</span><br><span class="line">    <span class="keyword">if</span> (rcount == <span class="number">0</span>)</span><br><span class="line">      v(fsem);</span><br><span class="line"></span><br><span class="line">    v(rcountsem)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_justice</span><span class="params">()</span></span>&#123; </span><br><span class="line">  p(q) ; </span><br><span class="line">  p(fsem) ; </span><br><span class="line">  v(q); </span><br><span class="line">  <span class="comment">// writing... </span></span><br><span class="line">  v (fsem) ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="哲学家就餐问题"><a href="#哲学家就餐问题" class="headerlink" title="哲学家就餐问题"></a>哲学家就餐问题</h2><h3 id="信号量解决方案一"><a href="#信号量解决方案一" class="headerlink" title="信号量解决方案一"></a>信号量解决方案一</h3><p>这一种方案有死锁风险</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">semaphore fork[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">philosopher</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">while</span> (<span class="literal">true</span>)  &#123;</span><br><span class="line">      think();</span><br><span class="line">      P(fork[i]);</span><br><span class="line">      P(fork[(i+<span class="number">1</span>) mod <span class="number">5</span>]);</span><br><span class="line">      eat();</span><br><span class="line">      V(fork[(i+<span class="number">1</span>) mod <span class="number">5</span>]);</span><br><span class="line">      V(fork[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    parbegin(</span><br><span class="line">       philosopher(<span class="number">1</span>),</span><br><span class="line">       philosopher(<span class="number">2</span>),</span><br><span class="line">       philosopher(<span class="number">3</span>),</span><br><span class="line">       philosopher(<span class="number">4</span>),</span><br><span class="line">       philosopher(<span class="number">5</span>)</span><br><span class="line">     )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="信号量解决方案二"><a href="#信号量解决方案二" class="headerlink" title="信号量解决方案二"></a>信号量解决方案二</h3><p>这里增加了一个服务员，这个服务员只允许四位哲学家同时进入餐厅。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">semaphore fork[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">semaphore room=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">philosopher</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">while</span> (<span class="literal">true</span>)  &#123;</span><br><span class="line">      think();</span><br><span class="line">      P(room);</span><br><span class="line">      P(fork[i]);</span><br><span class="line">      P(fork[(i+<span class="number">1</span>) mod <span class="number">5</span>]);</span><br><span class="line">      eat();</span><br><span class="line">      V(fork[(i+<span class="number">1</span>) mod <span class="number">5</span>]);</span><br><span class="line">      V(fork[i]);</span><br><span class="line">      V(room); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    parbegin(</span><br><span class="line">       philosopher(<span class="number">0</span>),</span><br><span class="line">       philosopher(<span class="number">1</span>),</span><br><span class="line">       philosopher(<span class="number">2</span>),</span><br><span class="line">       philosopher(<span class="number">3</span>),</span><br><span class="line">       philosopher(<span class="number">4</span>)</span><br><span class="line">     )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;使用信号量解决同步问题&quot;&gt;&lt;a href=&quot;#使用信号量解决同步问
      
    
    </summary>
    
      <category term="Operating System" scheme="https://wwyf.github.io/categories/Operating-System/"/>
    
    
      <category term="Operating System" scheme="https://wwyf.github.io/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>scipy题目</title>
    <link href="https://wwyf.github.io/2018/06/03/2018-06-2018-06-03-scipy%E9%A2%98%E7%9B%AE/"/>
    <id>https://wwyf.github.io/2018/06/03/2018-06-2018-06-03-scipy题目/</id>
    <published>2018-06-02T17:06:26.000Z</published>
    <updated>2019-01-12T03:33:37.284Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>scipy题目（高级编程技术 week-13）</p><h1 id="第一题-Least-squares"><a href="#第一题-Least-squares" class="headerlink" title="第一题 Least squares"></a>第一题 Least squares</h1><p><img src="https://lh3.googleusercontent.com/-dDrRXVqhk3Q/WxK883E-l5I/AAAAAAAAIGw/aqsnsx414eUyVTsb4Er8ROkleqtKVnIWQCHMYCw/s0/Acrobat_2018-06-02_23-51-12.png" alt=""></p><p>关于这一道题，使用<code>scipy</code>库中的leastsq函数即可求解。</p><h2 id="第一步：先生成可用的矩阵和向量"><a href="#第一步：先生成可用的矩阵和向量" class="headerlink" title="第一步：先生成可用的矩阵和向量"></a>第一步：先生成可用的矩阵和向量</h2><p>在本题中，我需要先生成矩阵$A$，向量$b$，考虑到后期该问题需要有解，向量$b$不随机生成，而是先随机生成x，然后算出b。代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy <span class="keyword">as</span> sp</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 维数</span></span><br><span class="line">m = <span class="number">20</span></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line"><span class="comment"># 生成矩阵A</span></span><br><span class="line">A = np.random.normal(size=(m,n), scale=<span class="number">15</span>, loc=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 生成假想的该问题应有的解</span></span><br><span class="line">xx = np.random.normal(size=n,scale=<span class="number">15</span>, loc=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 生成该解对应的向量b</span></span><br><span class="line">b = np.dot(A, xx)</span><br></pre></td></tr></table></figure><p>在生成了可用的数据后，便使用<code>leastsq</code>函数解决问题，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> leastsq</span><br><span class="line"><span class="comment"># 问题求解初始向量</span></span><br><span class="line">x = np.ones(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 误差函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">(xx)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.dot(A, xx) - b</span><br><span class="line"></span><br><span class="line">x_result,cov_x = leastsq(error, x)</span><br><span class="line"></span><br><span class="line">print(x_result, cov_x)</span><br><span class="line"><span class="comment"># 计算误差向量的范数</span></span><br><span class="line">norm_residual = np.linalg.norm(np.dot(A, x_result) - b)</span><br><span class="line">print(norm_residual)</span><br></pre></td></tr></table></figure><p>运行以上代码后，可以得到下面的解：</p><p><img src="https://lh3.googleusercontent.com/-s2hBkNNeRjc/WxK-gTRv7DI/AAAAAAAAIHA/JRLBcM8fMsQueKjikFqli8j4ofSbpyGGACHMYCw/s0/Snipaste_2018-06-02_23-57-51.png" alt=""></p><h1 id="第二题-Optimization"><a href="#第二题-Optimization" class="headerlink" title="第二题 Optimization"></a>第二题 Optimization</h1><p>求函数最大值，使用scipy自带的<code>fmin</code>函数即可，这里稍微转换一下，由于只有fmin这个函数可用，而我们找的又是最大值，我们就只需要给函数加个负数，就变成了求最小值，这样子就把问题转换过来了。下面是代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> -(np.sin(x<span class="number">-2</span>) * np.sin(x<span class="number">-2</span>) * np.exp(-x**<span class="number">2</span>))</span><br><span class="line">minimum = sp.optimize.fmin(func, <span class="number">1</span>)</span><br><span class="line">print(minimum)</span><br></pre></td></tr></table></figure><p>求得的结果是</p><p><img src="https://lh3.googleusercontent.com/-IvETNo_juTo/WxLAFdrZDwI/AAAAAAAAIHc/7_Py8ig2HPAkhIxYjZLLkd_o7WOzy339gCHMYCw/s0/chrome_2018-06-03_00-04-36.png" alt=""></p><p>经过绘图检验，可见的确是在$x  \approx  0.2162$左右这个点处取得最大值。</p><p><img src="https://lh3.googleusercontent.com/-SkeVUHyos0w/WxK_mgpVPXI/AAAAAAAAIHQ/jse6SOy5lcoIsnnyhtVsCvLig_ziCXnAwCHMYCw/s0/chrome_2018-06-03_00-02-34.png" alt=""></p><h1 id="第三题-Pairwise-distances"><a href="#第三题-Pairwise-distances" class="headerlink" title="第三题 Pairwise distances"></a>第三题 Pairwise distances</h1><p><img src="https://lh3.googleusercontent.com/-5aEeTC6bIP8/WxLA0AuD_aI/AAAAAAAAIHk/MJxRkLpbFcsJY3WMCFoq2ipq6rS4H6PiQCHMYCw/s0/Acrobat_2018-06-03_00-07-43.png" alt=""></p><p>在scipy文档中，找到了这样的函数可以实现计算行之间的距离的功能：<code>pdist</code></p><p><img src="https://lh3.googleusercontent.com/-Tsoa0YGUm1E/WxLF6UXmGWI/AAAAAAAAIHw/jhuLv28CyiYp9fFCZxAIb0kHXuhNTCVRwCHMYCw/s0/zeal_2018-06-03_00-29-28.png" alt=""></p><p>因此实现的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.spatial.distance <span class="keyword">import</span> pdist</span><br><span class="line">m = <span class="number">30</span></span><br><span class="line">n = <span class="number">20</span></span><br><span class="line">X = np.random.normal(size=(n, m), scale=<span class="number">10</span>, loc=<span class="number">10</span>)</span><br><span class="line">Y = pdist(X, <span class="string">'sqeuclidean'</span>)</span><br><span class="line">print(Y.shape)</span><br><span class="line">print(Y)</span><br></pre></td></tr></table></figure><p>注意，这里需要说明的数，这里使用的是欧拉距离公式，因此在函数参数中有一个<code>sqeuclidean</code>的项。</p><p>文档内容可见</p><p><img src="https://lh3.googleusercontent.com/-NRkKbXszA4A/WxLGnXHik_I/AAAAAAAAIIE/mxnQxzD8N7YJp2HtGXbzLBUe4IG3SGLrQCHMYCw/s0/zeal_2018-06-03_00-32-28.png" alt=""></p><p>结果可见</p><p><img src="https://lh3.googleusercontent.com/-tX2q0DHAWfw/WxLGJLypZYI/AAAAAAAAIH0/VEq0zx9SVJoUgWjUmFzC9Kz6VvEeZJAKACHMYCw/s0/chrome_2018-06-03_00-30-27.png" alt=""></p><p>经过检验，的确应该是190个数（毕竟 20 * 19 /2 )， 其余的结果也是正确的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;scipy题目（高级编程技术 week-13）&lt;/p&gt;
&lt;h1 id=&quot;第一
      
    
    </summary>
    
      <category term="Python" scheme="https://wwyf.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://wwyf.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>matlibplot.pyplot的使用</title>
    <link href="https://wwyf.github.io/2018/05/26/2018-05-2018-05-26-matlibplot-pyplot%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://wwyf.github.io/2018/05/26/2018-05-2018-05-26-matlibplot-pyplot的使用/</id>
    <published>2018-05-26T11:02:35.000Z</published>
    <updated>2019-01-12T03:33:37.284Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="matlibplot-相关题目"><a href="#matlibplot-相关题目" class="headerlink" title="matlibplot 相关题目"></a>matlibplot 相关题目</h1><p>在这节课中，老师给我们讲了python中<code>matplotlib</code>库的用法，基于这些，我完成了以下三道习题。</p><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p><img src="https://lh3.googleusercontent.com/-Aae8ozqHe9Y/WwmYqG774oI/AAAAAAAAIBs/Xxt9JYakSLkQcixclsrdCLn03a3r7dUUgCHMYCw/s0/Acrobat_2018-05-27_01-26-00.png" alt=""></p><!-- [t1] --><p>该题需要我们在$ [0,2] $这个区间内画出这个函数的图，并且增加一些适合的标签和题目。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>,<span class="number">2</span>,<span class="number">50</span>)</span><br><span class="line">y = np.sin(x<span class="number">-2</span>) * np.sin(x<span class="number">-2</span>) * np.exp(-x**<span class="number">2</span>)</span><br><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line">plt.xlabel(<span class="string">"x"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y"</span>)</span><br><span class="line">plt.ylim(<span class="number">-0.1</span>, <span class="number">1</span>)</span><br><span class="line">plt.title(<span class="string">r"$f(x) = sin^2(x-2)e^&#123;-x^2&#125;$"</span>)</span><br><span class="line">plt.annotate(<span class="string">'local max'</span>, xy=(<span class="number">0.22</span>, <span class="number">0.9</span>), xytext=(<span class="number">0.13</span>, <span class="number">0.5</span>),</span><br><span class="line">            arrowprops=dict(facecolor=<span class="string">'black'</span>, shrink=<span class="number">0.05</span>))</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>运行的结果可见下图</p><p><img src="https://lh3.googleusercontent.com/-GAGUouCHD5Q/WwmZBaFnWgI/AAAAAAAAIB0/2gHHcX9ycZwNrudSTXXPHVlTJ75XPgZCgCHMYCw/s0/Typora_2018-05-27_01-27-34.png" alt=""></p><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><p>这一道题的题目可见：</p><p><img src="https://lh3.googleusercontent.com/-pW38bOuWQ1o/WwmZK6-93RI/AAAAAAAAIB4/_HaQ0cbw2i0QG6oN_x2fqjdhjYIxQdUpgCHMYCw/s0/Acrobat_2018-05-27_01-28-12.png" alt=""></p><p>在这里，题目要求我们自己给出方程的$y = Xb+z$各个量的值，然后使用$X$和$y$去反过来估计出原来的$b$。</p><p>根据题目提示，此处为多元线性回归模型，使用最小二乘法即可，在<code>scipy</code>模块中有<code>leastsq</code>函数，可以用来寻找此种回归模型的解。于是我的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">X = np.random.normal(loc=<span class="number">5</span>,scale=<span class="number">5</span>,size=(<span class="number">20</span>,<span class="number">10</span>))</span><br><span class="line">b = np.random.normal(loc=<span class="number">0</span>,scale=<span class="number">5</span>,size=<span class="number">10</span>)</span><br><span class="line">z = np.random.normal(size=<span class="number">20</span>)</span><br><span class="line">y = np.dot(X,b) + z</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始向量</span></span><br><span class="line">b_e = np.ones(<span class="number">10</span>)</span><br><span class="line">print(b_e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 误差函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">(p,xxx,yyy)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.dot(xxx,p)-yyy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最小二乘法</span></span><br><span class="line">b_e,cost=leastsq(error,b_e,args=(X,y)) </span><br><span class="line"></span><br><span class="line">plt.figure(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">"index"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"value"</span>)</span><br><span class="line">plt.plot(b, <span class="string">'rx'</span>, label=<span class="string">"True coefficients"</span>)</span><br><span class="line">plt.plot(b_e, <span class="string">'b'</span>, label=<span class="string">"Estimated coefficients"</span>)</span><br><span class="line">plt.legend(bbox_to_anchor=(<span class="number">1.05</span>, <span class="number">1</span>), loc=<span class="number">2</span>, borderaxespad=<span class="number">0.</span>)</span><br><span class="line">plt.axis([<span class="number">0</span>,<span class="number">9</span>,<span class="number">-10</span>,<span class="number">10</span>])</span><br><span class="line">plt.hlines(<span class="number">0</span>,<span class="number">0</span>,<span class="number">9</span> ,colors = <span class="string">"c"</span>, linestyles = <span class="string">"dashed"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>运行后，结果可见下图</p><p><img src="https://lh3.googleusercontent.com/-QnpNTzDT-aY/WwmZRBpPQtI/AAAAAAAAIB8/2-FK9r2_ydsjxG92OL-DlpHz8LnG08GXwCHMYCw/s0/Typora_2018-05-27_01-28-38.png" alt=""></p><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><p>该题题面如下：</p><p><img src="https://lh3.googleusercontent.com/-zggHcCV9uGY/WwmZWNuaN9I/AAAAAAAAICA/C7Je5XQCUnMAJsVZVFKdEthfpe6ERRhtwCHMYCw/s0/Acrobat_2018-05-27_01-28-57.png" alt=""></p><p>这一道题主要要求我们掌握关于直方图的绘制以及核函数密度估计的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = np.random.normal(scale=<span class="number">100</span>, size=<span class="number">10000</span>)</span><br><span class="line">kernel = stats.gaussian_kde(data)</span><br><span class="line">full_data = np.linspace(<span class="number">-500</span>,<span class="number">500</span>,<span class="number">10000</span>)</span><br><span class="line">est_data = kernel.evaluate(full_data)</span><br><span class="line">plt.figure(<span class="number">3</span>)</span><br><span class="line">plt.hist(data, <span class="number">30</span>, density=<span class="keyword">True</span>)</span><br><span class="line">plt.plot(full_data, est_data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>运行的结果可见下图：</p><p><img src="https://lh3.googleusercontent.com/-TTnRiT58NZ4/WwmZc7MENhI/AAAAAAAAICI/mhozONBX_NgNSE6KLCHSLX006flazqbEQCHMYCw/s0/Snipaste_2018-05-27_01-29-24.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;matlibplot-相关题目&quot;&gt;&lt;a href=&quot;#matlib
      
    
    </summary>
    
      <category term="Python" scheme="https://wwyf.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://wwyf.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Numpy实战</title>
    <link href="https://wwyf.github.io/2018/05/20/2018-05-2018-05-20-Numpy%E5%AE%9E%E6%88%98/"/>
    <id>https://wwyf.github.io/2018/05/20/2018-05-2018-05-20-Numpy实战/</id>
    <published>2018-05-20T09:23:16.000Z</published>
    <updated>2019-01-12T03:33:37.280Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="numpy实战（高级编程技术week-11）"><a href="#numpy实战（高级编程技术week-11）" class="headerlink" title="numpy实战（高级编程技术week 11）"></a>numpy实战（高级编程技术week 11）</h1><h2 id="做题前"><a href="#做题前" class="headerlink" title="做题前"></a>做题前</h2><p><img src="1526808338244.png" alt="1526808338244"></p><p>在这里，我使用了这样的代码来产生符合题目条件的矩阵</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.linalg <span class="keyword">import</span> toeplitz</span><br><span class="line">A = np.mat(np.random.normal(size=(<span class="number">200</span>,<span class="number">500</span>)))</span><br><span class="line">B = np.mat(toeplitz(np.random.normal(size=<span class="number">500</span>),np.random.normal(size=<span class="number">500</span>)))</span><br><span class="line">A,B</span><br></pre></td></tr></table></figure><p><img src="1526817524358.png" alt="1526817524358"></p><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p><img src="1526816368513.png" alt="1526816368513"></p><p>这里还是一些比较简单正常的计算，代码如下</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a1 = A + A</span><br><span class="line">a2 = A.dot(A.T)</span><br><span class="line">a3 = A.T.dot(A)</span><br><span class="line">a4 = A.dot(B)</span><br><span class="line">a1,a2,a3,a4</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="1526817566141.png" alt="1526817566141"></p><p>同时，根据题目要求，我还写了这样的一个函数，并且测试了一下。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t1</span><span class="params">(lamda)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> A.dot(B-lamda*np.eye(<span class="number">500</span>))</span><br><span class="line">t1(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>结果如图所示</p><p><img src="1526817629902.png" alt="1526817629902"></p><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><p><img src="1526817674473.png" alt="1526817674473"></p><p>首先使用<code>np.random.normal</code>函数生成这样的向量，为了求解该方程，可以考虑方程左右两边同时乘上矩阵$B$的逆，即$x = B’b$。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b = np.random.normal(size=(<span class="number">500</span>,<span class="number">1</span>))</span><br><span class="line">x = B.I.dot(b)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><p>结果如下</p><p><img src="1526817829216.png" alt="1526817829216"></p><h2 id="问题三：范数"><a href="#问题三：范数" class="headerlink" title="问题三：范数"></a>问题三：范数</h2><p><img src="1526817860292.png" alt="1526817860292"></p><p>这一道题主要考虑的是<code>np.linalg.norm</code>函数的使用。</p><p>查阅文档得知，该函数的原型为<code>numpy.linalg.norm(x, ord=None, axis=None, keepdims=False)</code>同时参数的功能如下表：</p><p><img src="1526818006366.png" alt="1526818006366"></p><p>由此，可以写出这道题的代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.linalg.norm(A, ord=<span class="string">'fro'</span>) <span class="comment"># Frobenius norm</span></span><br><span class="line">np.linalg.norm(B, ord=np.inf) <span class="comment"># infinity norm</span></span><br><span class="line">np.linalg.norm(B, ord=<span class="number">2</span>) <span class="comment"># biggest singular values</span></span><br><span class="line">np.linalg.norm(B, ord=<span class="number">-2</span>) <span class="comment"># smallest singular values</span></span><br></pre></td></tr></table></figure><p>结果可见</p><p><img src="1526818519102.png" alt="1526818519102"></p><h2 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h2><p><img src="1526818798465.png" alt="1526818798465"></p><p>关于这个幂迭代法求解矩阵的特征向量，我使用了以下代码来实现。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power_iteration</span><span class="params">(A, error)</span>:</span></span><br><span class="line">    v_k = np.random.rand(A.shape[<span class="number">1</span>])</span><br><span class="line">    v_k1 = np.random.rand(A.shape[<span class="number">1</span>])</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> np.linalg.norm(v_k - v_k1) &gt;= error:</span><br><span class="line">        v_k = v_k1</span><br><span class="line">        u_k1 = np.dot(A, v_k)</span><br><span class="line">        m_k1 = np.max(u_k1)</span><br><span class="line">        v_k1 = u_k1/m_k1</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (np.max(u_k1), v_k1, count)</span><br><span class="line"></span><br><span class="line">power_iteration(np.array([[<span class="number">-4</span>, <span class="number">14</span>, <span class="number">0</span>], [<span class="number">-5</span>, <span class="number">13</span>, <span class="number">0</span>], [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">2</span>]]), <span class="number">0.00000001</span>)</span><br><span class="line"><span class="comment">#Z = np.random.normal(size=(200,200))</span></span><br><span class="line"><span class="comment">#power_iteration(Z, 0.000000001)</span></span><br></pre></td></tr></table></figure><p>在进一步的测试中，验证了该程序的正确性。</p><p>我计算了$\begin{bmatrix} -4 &amp; 14 &amp; 0 \ -5 &amp; 13 &amp; 0 \ -1 &amp; 0 &amp; 2 \end{bmatrix} $该矩阵的特征值和特征向量，与自己算的值是一致的。见下图：</p><p><img src="1526821761320.png" alt="1526821761320"></p><h2 id="问题五"><a href="#问题五" class="headerlink" title="问题五"></a>问题五</h2><p><img src="1526822090378.png" alt="1526822090378"></p><p>这里需要探寻$n$, $p$,还有最大奇异值之间的关系。从<code>scipy</code>的文档中找到关于求奇异值的函数：<code>scipy.linalg.svd(C)</code>,其中第二个返回值就是奇异值列表。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> linalg</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_singular_value</span><span class="params">(size, p)</span>:</span></span><br><span class="line">t = np.random.rand(size, size) &gt; p</span><br><span class="line">C = np.zeros((size,size))</span><br><span class="line">C[t]=<span class="number">1</span></span><br><span class="line">s_v = linalg.svd(C)[<span class="number">1</span>]</span><br><span class="line">l_s_v = np.max(s_v)</span><br><span class="line"><span class="keyword">return</span> l_s_v</span><br><span class="line"></span><br><span class="line">get_singular_valut(<span class="number">200</span>,<span class="number">0.6</span>)</span><br><span class="line"></span><br><span class="line">t = []</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">5</span>,<span class="number">300</span>):</span><br><span class="line">     t.append(get_singular_value(n,<span class="number">0.6</span>))</span><br><span class="line">plt.plot(range(<span class="number">5</span>,<span class="number">300</span>), t)</span><br><span class="line"></span><br><span class="line">t = []</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> np.linspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">t.append(get_singular_value(<span class="number">100</span>,n))</span><br><span class="line">plt.plot(np.linspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">30</span>),t)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>通过实验，得知，当n渐渐变大时，最大奇异值也在变大</p><p><img src="1526824805194.png" alt="1526824805194"></p><p>当p变小的时候，最大奇异值变小，如下图</p><p><img src="1526825105402.png" alt="1526825105402"></p><h2 id="问题六"><a href="#问题六" class="headerlink" title="问题六"></a>问题六</h2><p><img src="1526822550858.png" alt="1526822550858"></p><p>这里要写一个函数，去寻找数据A中最接近$z$的数，函数需要返回最接近的值，以下是代码实现。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_nearest</span><span class="params">(A, z)</span>:</span></span><br><span class="line"><span class="keyword">return</span> A[np.argmin(np.abs(A-z))]</span><br></pre></td></tr></table></figure><p>以下是运行截图：</p><p><img src="1526823900930.png" alt="1526823900930"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>wiki：<a href="https://en.wikipedia.org/wiki/Power_iteration" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Power_iteration</a></li><li>numpy文档：<a href="https://www.numpy.org/devdocs/reference/" target="_blank" rel="noopener">https://www.numpy.org/devdocs/reference/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;numpy实战（高级编程技术week-11）&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="Python" scheme="https://wwyf.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://wwyf.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>git删除大文件</title>
    <link href="https://wwyf.github.io/2018/05/19/2018-05-2018-05-19-git%E5%88%A0%E9%99%A4%E5%A4%A7%E6%96%87%E4%BB%B6/"/>
    <id>https://wwyf.github.io/2018/05/19/2018-05-2018-05-19-git删除大文件/</id>
    <published>2018-05-19T02:09:20.000Z</published>
    <updated>2019-01-12T03:33:37.276Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>不作死就不会死，不应该，不应该把视频都放到git仓库中。</p><p>下面知乎中的命令给了我很大的帮助。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch --force --index-filter <span class="string">'git rm --cached --ignore-unmatch "这里是文件名匹配的地方！！" '</span> --prune-empty --tag-name-filter cat -- --all</span><br><span class="line"></span><br><span class="line">git push origin --force --all</span><br><span class="line"></span><br><span class="line">git push origin --force --tags</span><br><span class="line"></span><br><span class="line">git <span class="keyword">for</span>-each-ref --format=<span class="string">'delete %(refname)'</span> refs/original | git update-ref --stdin</span><br><span class="line"></span><br><span class="line">git reflog expire --expire=now --all</span><br><span class="line"></span><br><span class="line">git gc --prune=now</span><br><span class="line"></span><br><span class="line">git count-objects -v</span><br></pre></td></tr></table></figure><p><a href="https://www.zhihu.com/question/54419234" target="_blank" rel="noopener">https://www.zhihu.com/question/54419234</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;不作死就不会死，不应该，不应该把视频都放到git仓库中。&lt;/p&gt;
&lt;p&gt;下面
      
    
    </summary>
    
      <category term="test" scheme="https://wwyf.github.io/categories/test/"/>
    
    
      <category term="test" scheme="https://wwyf.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>ftp服务器的配置</title>
    <link href="https://wwyf.github.io/2018/05/19/2018-05-2018-05-19-ftp%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>https://wwyf.github.io/2018/05/19/2018-05-2018-05-19-ftp服务器的配置/</id>
    <published>2018-05-18T16:21:20.000Z</published>
    <updated>2019-01-12T03:33:37.276Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>今天在自己的远程服务器上配置好了ftp服务器，有必要记录下来。</p><p><a href="http://www.cnblogs.com/xiongpq/p/3384759.html" target="_blank" rel="noopener">http://www.cnblogs.com/xiongpq/p/3384759.html</a></p><p>这个博客给了我很大的帮助。</p><p>注意有一个坑：配置文件每一行后面都不能够有空格，不然会发生读取配置文件错误的坑。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;今天在自己的远程服务器上配置好了ftp服务器，有必要记录下来。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="test" scheme="https://wwyf.github.io/categories/test/"/>
    
    
      <category term="test" scheme="https://wwyf.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wwyf.github.io/2018/05/13/2018-05-2018-05-13-%E4%B8%AD%E5%BF%83%E6%8E%A7%E5%88%B6%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9/"/>
    <id>https://wwyf.github.io/2018/05/13/2018-05-2018-05-13-中心控制路由选择/</id>
    <published>2018-05-13T13:07:01.000Z</published>
    <updated>2019-01-12T03:33:37.276Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>中心控制的路由选择的实现</p><h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><ol><li>每一个路由器维护一个线程，这个线程用来与中心服务器维持连接<ol><li>该线程定期发送本地链路信息给中心服务器</li><li>定期从中心服务器获取路由表，并用于替换本地路由表</li></ol></li></ol><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><ol><li>服务器对每一个路由器的连接建立一个定时器</li><li>服务器上<ol><li>主线程：定期从队列中取出链路信息，并更新路由表<ol><li>链路信息：包括链路的存在，费用，以及某路由的下线</li><li>注意：主线程需要维护每一个路由器的路由表<ol><li>有一个重点：<strong>邻接矩阵-&gt;某路由器路由表这个过程需要好好实现</strong></li></ol></li></ol></li><li>其他线程：<ol><li>维护一个与路由器的连接</li><li>定期发送路由表</li><li>将接收到的链路状态放入队列中供主线程使用用来更新路由表</li><li>如果一段时间没有接收到信息，将该路由器已下线的信息放入队列中</li></ol></li></ol></li></ol><h2 id="如何初始化路由器"><a href="#如何初始化路由器" class="headerlink" title="如何初始化路由器"></a>如何初始化路由器</h2><ol><li>配置文件里写好controller的ip</li><li>就行啦</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;中心控制的路由选择的实现&lt;/p&gt;
&lt;h2 id=&quot;路由器&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Computer Network" scheme="https://wwyf.github.io/categories/Computer-Network/"/>
    
    
      <category term="Computer Network" scheme="https://wwyf.github.io/tags/Computer-Network/"/>
    
  </entry>
  
  <entry>
    <title>OSPF协议</title>
    <link href="https://wwyf.github.io/2018/05/13/2018-05-2018-05-13-OSPF%E5%8D%8F%E8%AE%AE/"/>
    <id>https://wwyf.github.io/2018/05/13/2018-05-2018-05-13-OSPF协议/</id>
    <published>2018-05-13T12:19:20.000Z</published>
    <updated>2019-01-12T03:33:37.276Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>OSPF协议</p><p><a href="http://www.cnblogs.com/sddai/p/5399482.html" target="_blank" rel="noopener">http://www.cnblogs.com/sddai/p/5399482.html</a></p><p><a href="https://zh.wikipedia.org/wiki/%E5%BC%80%E6%94%BE%E5%BC%8F%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E4%BC%98%E5%85%88" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E5%BC%80%E6%94%BE%E5%BC%8F%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E4%BC%98%E5%85%88</a></p><p><a href="https://www.qingsword.com/qing/596.html" target="_blank" rel="noopener">https://www.qingsword.com/qing/596.html</a></p><p>线程1：维护与多个路由器之间的连接，并得知最新本地链路情况</p><p>线程2：接受包，判断是否需要转发和广播</p><p>维护</p><pre><code>1. 与广播有关的信息，防止风暴2. 网络拓扑数据库</code></pre><h2 id="报文类型"><a href="#报文类型" class="headerlink" title="报文类型"></a>报文类型</h2><ol><li>链路状态更新报文,广播</li><li>keepalive报文</li><li><p><del>全局拓扑数据交换报文</del>？</p><h2 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h2></li></ol><p>拓扑数据库</p><p><strong>1.类型1:Router LSA</strong>：每个路由器都将产生Router LSA，这种LSA只在本区域内传播，描述了路由器所有的链路和接口，状态和开销.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;OSPF协议&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnbl
      
    
    </summary>
    
      <category term="Computer Network" scheme="https://wwyf.github.io/categories/Computer-Network/"/>
    
    
      <category term="Computer Network" scheme="https://wwyf.github.io/tags/Computer-Network/"/>
    
  </entry>
  
</feed>
